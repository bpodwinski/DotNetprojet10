@page "/account/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Frontend.Data
@using System.Text;
@using System.Text.Json;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Frontend.Services
@using Frontend.Locales

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject HttpClient HttpClient
@inject IStringLocalizer<Resource> Localizer
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject CustomHttpClient CustomHttpClient

<PageTitle>@Localizer["Login"]</PageTitle>

<h1>@Localizer["Login"]</h1>

<div class="row">
    <div class="col-lg-6">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.UserName" id="Input.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="@Localizer["Username"]" />
                    <label for="Input.UserName" class="form-label">@Localizer["Username"]</label>
                    <ValidationMessage For="() => Input.UserName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="@Localizer["Password"]" />
                    <label for="Input.Password" class="form-label">@Localizer["Password"]</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">@Localizer["Login"]</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear existing external cookie to ensure clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        try
        {
            var loginData = new
            {
                username = Input.UserName,
                password = Input.Password
            };

            var response = await CustomHttpClient.PostAsync("auth/login", loginData);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var loginResponse = JsonSerializer.Deserialize<LoginResponse>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.Token))
                {
                    // Store JWT token in cookie
                    HttpContext.Response.Cookies.Append("AuthToken", loginResponse.Token, new CookieOptions
                        {
                            HttpOnly = true,
                            Secure = true,
                            SameSite = SameSiteMode.Strict,
                            Expires = DateTimeOffset.UtcNow.AddHours(1)
                        });

                    Logger.LogInformation("User logged in.");

                    // Notify authentication state provider
                    AuthStateProvider.NotifyUserAuthentication(loginResponse.Token);
                    StateHasChanged();
                }
                else
                {
                    errorMessage = Localizer["ErrorUnableToRetrieveToken"];
                }
            }
            else
            {
                errorMessage = Localizer["ErrorInvalidLogin"];
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during login process.");
            errorMessage = Localizer["ErrorGenericLogin"];
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }

    private class LoginResponse
    {
        public string Token { get; set; } = "";
        public string RefreshToken { get; set; } = "";
        public int UserId { get; set; }
    }
}
