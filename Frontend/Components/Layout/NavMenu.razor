@implements IDisposable

@using Microsoft.Extensions.Localization
@using System.Globalization
@using Frontend.Locales
@using Frontend.Services

@inject IStringLocalizer<Resource> Localizer
@inject NavigationManager NavigationManager
@inject CustomHttpClient CustomHttpClient
@inject CustomAuthenticationStateProvider AuthStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Frontend</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="patients">
                        <span class="bi bi-person-lines-fill" aria-hidden="true"></span> @Localizer["Patients"]
                    </NavLink>
                    <button class="nav-link" @onclick="Logout">
                        <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> @Localizer["Logout"]
                    </button>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> @Localizer["Login"]
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task Logout()
    {
        try
        {
            var response = await CustomHttpClient.PostAsync<object>("auth/logout", "");

            if (response.IsSuccessStatusCode)
            {
                // Notify authentication state provider
                await  ((CustomAuthenticationStateProvider)AuthStateProvider).NotifyUserLogout();

                NavigationManager.NavigateTo("login", true);
            }
            else
            {
                Console.WriteLine($"Erreur lors de la déconnexion : {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la déconnexion : {ex.Message}");
        }
    }
}
