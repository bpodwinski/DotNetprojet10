@using Models

@inject ILogger<ToastParts> Logger

<div id="@ToastId" class="toast align-items-center @ToastColor border-0" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">
            @Title
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
</div>

@code {
    [Parameter]
    public string ToastId { get; set; } = $"toast-{Guid.NewGuid()}";

    [Parameter]
    public string Title { get; set; } = "Notification";

    [Parameter]
    public string Message { get; set; } = string.Empty;

    [Parameter]
    public ToastSeverity Severity { get; set; }

    [Parameter]
    public EventCallback OnToastClosed { get; set; }

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ShowToast();
        }
    }

    private string ToastColor => Severity switch
    {
        ToastSeverity.Success => "text-bg-success",
        ToastSeverity.Warning => "text-bg-warning",
        ToastSeverity.Error => "text-bg-danger",
        _ => "text-bg-primary"
    };

    public async Task ShowToast()
    {
        try
        {
            var toastInstance = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "bootstrap.Toast.getOrCreateInstance",
                $"#{ToastId}"
            );
            await toastInstance.InvokeVoidAsync("show");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error showing toast with ID {ToastId}", ToastId);
        }
    }
}
