@page "/note/add/{PatientId:int?}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Frontend.Services
@using Frontend.Locales
@using System.Net.Http.Json;
@using System.ComponentModel.DataAnnotations;
@using Layout

@inject CustomHttpClient CustomHttpClient
@inject IStringLocalizer<Resource> Localizer
@inject IJSRuntime JSRuntime

<PageTitle>@Localizer["AddNote"]</PageTitle>

<h2>@Localizer["AddNote"]</h2>

<div class="card mb-4">
    <div class="card-body">
        <EditForm Model="newNote" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">@Localizer["Note"]</label>
                <InputTextArea @bind-Value="newNote.Note" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">@Localizer["AddNote"]</button>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    private MainLayout Layout { get; set; } = default!;

    [Parameter]
    public int? PatientId { get; set; }

    [Parameter]
    public EventCallback OnNoteAdded { get; set; }

    private NoteInputModel newNote = new();
    private string statusMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await CustomHttpClient.PostAsync("notes", newNote);
            if (response.IsSuccessStatusCode)
            {
                Layout.ShowToast(Localizer["NoteAddedSuccess"], "The note has been successfully added");
                if (OnNoteAdded.HasDelegate)
                {
                    await OnNoteAdded.InvokeAsync();
                }
            }
            else
            {
                Layout.ShowToast(Localizer["NoteAddedFailed"], "The note has been successfully added");
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"{Localizer["NoteAddedError"]}: {ex.Message}";
        }
    }

    protected override void OnInitialized()
    {
        if (PatientId.HasValue)
        {
            newNote.PatientId = PatientId.Value;
        }
    }

    private class NoteInputModel
    {
        [Required]
        public int PatientId { get; set; }

        [Required]
        public string Note { get; set; } = string.Empty;
    }
}
