@page "/notes/{PatientId:int}"

@using Microsoft.Extensions.Localization
@using System.Text.Json
@using Models
@using Services
@using Locales
@using Layout

@inject CustomHttpClient CustomHttpClient
@inject IStringLocalizer<Resource> Localizer
@inject NavigationManager NavigationManager

<h2>@Localizer["Notes"]</h2>

@if (notes != null && notes.Any())
{
    <div class="notes mb-4">
        @foreach (var note in notes)
        {
            var noteId = $"note-{note.Id}";
            <div class="card @noteId mb-4">

                <h5 class="card-header d-flex justify-content-between align-items-center">
                    @Localizer["NoteFrom"] @note.LocalDate
                    <button class="btn btn-danger" @onclick="() => DeleteNoteAsync(note.Id)" data-bs-toggle="tooltip" data-bs-title="@Localizer[" Delete"]">
                        <i class="bi bi-trash"></i>
                    </button>
                </h5>

                <div class="card-body">
                    @note.Note
                </div>
            </div>
        }
    </div>
}
else if (isNotesLoading)
{
    <Loading />
}
else
{
    <div class="alert alert-info" role="alert">
        @Localizer["NoNotesFound"]
    </div>
}

@code {
    [CascadingParameter]
    private MainLayout Layout { get; set; } = default!;

    [Parameter]
    public int PatientId { get; set; }

    private List<NoteModel>? notes = null;
    private bool isNotesLoading = true;
    private string statusMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await LoadPatientNotes();
        StateHasChanged();
    }

    public async Task LoadPatientNotes()
    {
        try
        {
            isNotesLoading = true;
            var response = await CustomHttpClient.GetAsync($"notes/patientid/{PatientId}");

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                notes = JsonSerializer.Deserialize<List<NoteModel>>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                notes ??= new List<NoteModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notes for patient: {ex.Message}");
            notes = new List<NoteModel>();
        }
        finally
        {
            isNotesLoading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteNoteAsync(string noteId)
    {
        try
        {
            isNotesLoading = true;
            var response = await CustomHttpClient.DeleteAsync($"notes/{noteId}");

            if (response.IsSuccessStatusCode)
            {
                await LoadPatientNotes();

                Layout.ShowToast(Localizer["NoteDeletedSuccess"], Localizer["The note has been successfully deleted"]);
            }
            else
            {
                Layout.ShowToast(Localizer["NoteDeletedFailed"], Localizer["Failed to delete the note."]);
            }
        }
        catch (Exception ex)
        {
            Layout.ShowToast(Localizer["ErrorDeletingNote"], $"Error: {ex.Message}");
        }
        finally
        {
            isNotesLoading = false;
            StateHasChanged();
        }
    }
}
