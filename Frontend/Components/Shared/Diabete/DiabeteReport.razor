@page "/diabete/{PatientId:int}"

@using Microsoft.Extensions.Localization
@using System.Text.Json
@using Models
@using Services
@using Locales

@inject CustomHttpClient CustomHttpClient
@inject IStringLocalizer<Resource> Localizer
@inject NavigationManager NavigationManager

<h2>@Localizer["Diabete"]</h2>

@if (report != null)
{
    <div class="report alert @GetAlertClass(report.RiskLevel) mb-4">
        <h4 class="text-center"><strong>@report.RiskLevel</strong></h4>
    </div>

    @if (report.TriggerTerms.Any())
    {
        <h4>@Localizer["CausedBy"]</h4>
        <ul class="list-group">
            @foreach (var term in report.TriggerTerms)
            {
                <li class="list-group-item">@term</li>
            }
        </ul>
    }
}
else if (isReportLoading)
{
    <Loading />
}
else
{
    <div class="alert alert-info" role="alert">
        @Localizer["NoReportFound"]
    </div>
}

@code {
    [Parameter]
    public int PatientId { get; set; }

    private DiabeteModel? report = null;
    private bool isReportLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        await LoadDiabeteReport();
        StateHasChanged();
    }

    public async Task LoadDiabeteReport()
    {
        try
        {
            isReportLoading = true;
            var response = await CustomHttpClient.GetAsync($"reports/diabete/{PatientId}");
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                report = JsonSerializer.Deserialize<DiabeteModel>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
            }
            else
            {
                Console.WriteLine($"Failed to load report for PatientId {PatientId}. Status code: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading diabete report for patient: {ex.Message}");
        }
        finally
        {
            isReportLoading = false;
            StateHasChanged();
        }
    }

    private string GetAlertClass(string riskLevel)
    {
        return riskLevel switch
        {
            "None" => "alert-secondary",
            "Borderline" => "alert-warning",
            "In Danger" => "alert-danger",
            "Early Onset" => "alert-dark",
            _ => "alert-secondary"
        };
    }
}
