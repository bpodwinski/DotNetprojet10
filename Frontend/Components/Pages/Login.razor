@page "/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Frontend.Data
@using System.Text;
@using System.Text.Json;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Frontend.Services
@using Frontend.Locales

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IStringLocalizer<Resource> Localizer
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject CustomHttpClient CustomHttpClient

@if (!isAuthenticated) {
    <PageTitle>@Localizer["Login"]</PageTitle>

    <h1>@Localizer["Login"]</h1>

    <div class="row">
        <div class="col-lg-6">
            <section>
                <StatusMessage Message="@errorMessage" />
                <EditForm EditContext="@editContext" method="post" OnValidSubmit="LoginUser">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.UserName" id="Input.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="@Localizer["Username"]" />
                        <label for="Input.UserName" class="form-label">@Localizer["Username"]</label>
                    </div>

                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="@Localizer["Password"]" />
                        <label for="Input.Password" class="form-label">@Localizer["Password"]</label>
                    </div>

                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">@Localizer["Login"]</button>
                    </div>
                </EditForm>
            </section>
        </div>
    </div>
}

@code {
    private string? errorMessage;
    private bool isAuthenticated;
    private bool isRedirectionPending = false;
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(Input);
        editContext.OnFieldChanged += (sender, args) =>
        {
            messageStore.Clear(args.FieldIdentifier);
        };

        messageStore = new ValidationMessageStore(editContext);

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
        {
            NavigationManager.NavigateTo("patients", true);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (isRedirectionPending)
        {
            isRedirectionPending = false;
            NavigationManager.NavigateTo("patients", true);
        }
    }

    public async Task LoginUser()
    {
        try
        {
            messageStore.Clear();

            var loginData = new
            {
                username = Input.UserName,
                password = Input.Password
            };

            var response = await CustomHttpClient.PostAsync("auth/login", loginData);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var loginResponse = JsonSerializer.Deserialize<LoginResponse>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.Token))
                {
                    await AuthStateProvider.NotifyUserAuthenticationAsync(loginResponse.Token);

                    Logger.LogInformation("User logged in");

                    NavigationManager.NavigateTo("patients", true);
                }
                else
                {
                    messageStore.Add(editContext.Field(nameof(Input.UserName)), "Username is required.");
                    messageStore.Add(editContext.Field(nameof(Input.Password)), "Password is invalid.");
                    editContext.NotifyValidationStateChanged();
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var errorDetails = JsonSerializer.Deserialize<ErrorDetails>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                messageStore.Add(editContext.Field(nameof(Input.UserName)), "Username is required.");
                messageStore.Add(editContext.Field(nameof(Input.Password)), "Password is invalid.");
                editContext.NotifyValidationStateChanged();
            }
            else
            {
                messageStore.Add(editContext.Field(nameof(Input.Password)), Localizer["ErrorGenericLogin"]);
                editContext.NotifyValidationStateChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during login process.");
            messageStore.Add(editContext.Field(nameof(Input.UserName)), "Username is required.");
            messageStore.Add(editContext.Field(nameof(Input.Password)), "Password is invalid.");
            editContext.NotifyValidationStateChanged();
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }

    private class LoginResponse
    {
        public string Token { get; set; } = "";
        public string RefreshToken { get; set; } = "";
        public int UserId { get; set; }
    }

    private class ErrorDetails
    {
        public string Message { get; set; } = "";
    }
}
