@page "/patients/{PatientId:int}"

@using System.Text.Json
@using Frontend.Models
@using Frontend.Components.Shared.Diabete
@using Frontend.Components.Shared.Note
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Frontend.Services
@using Frontend.Locales

@inject CustomHttpClient CustomHttpClient
@inject IStringLocalizer<Resource> Localizer
@inject NavigationManager NavigationManager

<AuthGuard>
    <PageTitle>@Localizer["PatientDetails"]</PageTitle>

    @if (patient != null)
    {
        <h1 class="text-center mb-5">@patient.FirstName @patient.LastName</h1>

        <div class="col-md-12 col-lg-4 mb-4">
            <h2>@Localizer["PatientInfos"]</h2>

            <div class="card mb-4">
                <div class="card-body">
                    <p class="card-text text-center"><strong>@Localizer["BirthDate"]:</strong> @patient.DateOfBirth.ToShortDateString()</p>
                    <p class="card-text text-center"><strong>@Localizer["Age"]:</strong> @CalculateAge(patient.DateOfBirth) @Localizer["years"]</p>
                    <p class="card-text text-center"><strong>@Localizer["Gender"]:</strong> @patient.Gender</p>
                    <p class="card-text text-center"><strong>@Localizer["Address"]:</strong> @patient.Address</p>
                    <p class="card-text text-center"><strong>@Localizer["Phone"]:</strong> @patient.PhoneNumber</p>
                </div>
            </div>

            <DiabeteReport PatientId="PatientId" />
        </div>

        <div class="col-md-12 col-lg-8">
            <NoteAdd PatientId="PatientId" OnNoteAdded="RefreshNotes" />
            <Notes @ref="notesComponent" PatientId="PatientId" />
        </div>

        <div class="col-md-12 col-lg-12">
            <button class="btn btn-secondary mt-4" @onclick="GoBack">@Localizer["Back"]</button>
        </div>
    }
    else if (isLoading)
    {
        <Loading />
    }
    else
    {
        <p>@Localizer["PatientNotFound"]</p>
    }
</AuthGuard>

@code {
    [Parameter]
    public int PatientId { get; set; }

    private PatientModel? patient = null;
    private Notes? notesComponent = null;
    private bool isLoading = true;
    private bool dataLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        if (!dataLoaded)
        {
            await LoadPatientData();
        }
    }

    private async Task LoadPatientData()
    {
        try
        {
            isLoading = true;
            var response = await CustomHttpClient.GetAsync($"patients/{PatientId}");
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                patient = JsonSerializer.Deserialize<PatientModel>(responseContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                dataLoaded = true;
            }
            else
            {
                patient = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading patient details: {ex.Message}");
            patient = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private int CalculateAge(DateTime birthDate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthDate.Year;
        if (birthDate > today.AddYears(-age)) age--;
        return age;
    }

    private async Task RefreshNotes()
    {
        if (notesComponent != null)
        {
            await notesComponent.LoadPatientNotes();
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/patients");
    }
}
